# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import src.grpc_client.mom_pb2 as mom__pb2

GRPC_GENERATED_VERSION = '1.71.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in mom_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class TopicServiceStub(object):
    """Service for Topics
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateTopic = channel.unary_unary(
                '/mom.TopicService/CreateTopic',
                request_serializer=mom__pb2.CreateTopicRequest.SerializeToString,
                response_deserializer=mom__pb2.Response.FromString,
                _registered_method=True)
        self.PublishMessage = channel.unary_unary(
                '/mom.TopicService/PublishMessage',
                request_serializer=mom__pb2.PublishMessageRequest.SerializeToString,
                response_deserializer=mom__pb2.Response.FromString,
                _registered_method=True)
        self.Subscribe = channel.unary_unary(
                '/mom.TopicService/Subscribe',
                request_serializer=mom__pb2.SubscribeRequest.SerializeToString,
                response_deserializer=mom__pb2.Response.FromString,
                _registered_method=True)
        self.Unsubscribe = channel.unary_unary(
                '/mom.TopicService/Unsubscribe',
                request_serializer=mom__pb2.UnsubscribeRequest.SerializeToString,
                response_deserializer=mom__pb2.Response.FromString,
                _registered_method=True)
        self.ListTopics = channel.unary_unary(
                '/mom.TopicService/ListTopics',
                request_serializer=mom__pb2.Empty.SerializeToString,
                response_deserializer=mom__pb2.ListTopicsResponse.FromString,
                _registered_method=True)
        self.PullMessages = channel.unary_unary(
                '/mom.TopicService/PullMessages',
                request_serializer=mom__pb2.PullMessagesRequest.SerializeToString,
                response_deserializer=mom__pb2.MessagesResponse.FromString,
                _registered_method=True)
        self.DeleteTopic = channel.unary_unary(
                '/mom.TopicService/DeleteTopic',
                request_serializer=mom__pb2.DeleteTopicRequest.SerializeToString,
                response_deserializer=mom__pb2.Response.FromString,
                _registered_method=True)


class TopicServiceServicer(object):
    """Service for Topics
    """

    def CreateTopic(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PublishMessage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Subscribe(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Unsubscribe(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListTopics(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PullMessages(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteTopic(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TopicServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateTopic': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateTopic,
                    request_deserializer=mom__pb2.CreateTopicRequest.FromString,
                    response_serializer=mom__pb2.Response.SerializeToString,
            ),
            'PublishMessage': grpc.unary_unary_rpc_method_handler(
                    servicer.PublishMessage,
                    request_deserializer=mom__pb2.PublishMessageRequest.FromString,
                    response_serializer=mom__pb2.Response.SerializeToString,
            ),
            'Subscribe': grpc.unary_unary_rpc_method_handler(
                    servicer.Subscribe,
                    request_deserializer=mom__pb2.SubscribeRequest.FromString,
                    response_serializer=mom__pb2.Response.SerializeToString,
            ),
            'Unsubscribe': grpc.unary_unary_rpc_method_handler(
                    servicer.Unsubscribe,
                    request_deserializer=mom__pb2.UnsubscribeRequest.FromString,
                    response_serializer=mom__pb2.Response.SerializeToString,
            ),
            'ListTopics': grpc.unary_unary_rpc_method_handler(
                    servicer.ListTopics,
                    request_deserializer=mom__pb2.Empty.FromString,
                    response_serializer=mom__pb2.ListTopicsResponse.SerializeToString,
            ),
            'PullMessages': grpc.unary_unary_rpc_method_handler(
                    servicer.PullMessages,
                    request_deserializer=mom__pb2.PullMessagesRequest.FromString,
                    response_serializer=mom__pb2.MessagesResponse.SerializeToString,
            ),
            'DeleteTopic': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteTopic,
                    request_deserializer=mom__pb2.DeleteTopicRequest.FromString,
                    response_serializer=mom__pb2.Response.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'mom.TopicService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('mom.TopicService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class TopicService(object):
    """Service for Topics
    """

    @staticmethod
    def CreateTopic(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mom.TopicService/CreateTopic',
            mom__pb2.CreateTopicRequest.SerializeToString,
            mom__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def PublishMessage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mom.TopicService/PublishMessage',
            mom__pb2.PublishMessageRequest.SerializeToString,
            mom__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Subscribe(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mom.TopicService/Subscribe',
            mom__pb2.SubscribeRequest.SerializeToString,
            mom__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Unsubscribe(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mom.TopicService/Unsubscribe',
            mom__pb2.UnsubscribeRequest.SerializeToString,
            mom__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListTopics(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mom.TopicService/ListTopics',
            mom__pb2.Empty.SerializeToString,
            mom__pb2.ListTopicsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def PullMessages(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mom.TopicService/PullMessages',
            mom__pb2.PullMessagesRequest.SerializeToString,
            mom__pb2.MessagesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteTopic(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mom.TopicService/DeleteTopic',
            mom__pb2.DeleteTopicRequest.SerializeToString,
            mom__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class QueueServiceStub(object):
    """Service for Queues
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateQueue = channel.unary_unary(
                '/mom.QueueService/CreateQueue',
                request_serializer=mom__pb2.CreateQueueRequest.SerializeToString,
                response_deserializer=mom__pb2.Response.FromString,
                _registered_method=True)
        self.ListQueues = channel.unary_unary(
                '/mom.QueueService/ListQueues',
                request_serializer=mom__pb2.Empty.SerializeToString,
                response_deserializer=mom__pb2.ListQueuesResponse.FromString,
                _registered_method=True)
        self.PushMessage = channel.unary_unary(
                '/mom.QueueService/PushMessage',
                request_serializer=mom__pb2.PushMessageRequest.SerializeToString,
                response_deserializer=mom__pb2.Response.FromString,
                _registered_method=True)
        self.PullMessage = channel.unary_unary(
                '/mom.QueueService/PullMessage',
                request_serializer=mom__pb2.PullMessageRequest.SerializeToString,
                response_deserializer=mom__pb2.MessageResponse.FromString,
                _registered_method=True)


class QueueServiceServicer(object):
    """Service for Queues
    """

    def CreateQueue(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListQueues(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PushMessage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PullMessage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_QueueServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateQueue': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateQueue,
                    request_deserializer=mom__pb2.CreateQueueRequest.FromString,
                    response_serializer=mom__pb2.Response.SerializeToString,
            ),
            'ListQueues': grpc.unary_unary_rpc_method_handler(
                    servicer.ListQueues,
                    request_deserializer=mom__pb2.Empty.FromString,
                    response_serializer=mom__pb2.ListQueuesResponse.SerializeToString,
            ),
            'PushMessage': grpc.unary_unary_rpc_method_handler(
                    servicer.PushMessage,
                    request_deserializer=mom__pb2.PushMessageRequest.FromString,
                    response_serializer=mom__pb2.Response.SerializeToString,
            ),
            'PullMessage': grpc.unary_unary_rpc_method_handler(
                    servicer.PullMessage,
                    request_deserializer=mom__pb2.PullMessageRequest.FromString,
                    response_serializer=mom__pb2.MessageResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'mom.QueueService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('mom.QueueService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class QueueService(object):
    """Service for Queues
    """

    @staticmethod
    def CreateQueue(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mom.QueueService/CreateQueue',
            mom__pb2.CreateQueueRequest.SerializeToString,
            mom__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListQueues(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mom.QueueService/ListQueues',
            mom__pb2.Empty.SerializeToString,
            mom__pb2.ListQueuesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def PushMessage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mom.QueueService/PushMessage',
            mom__pb2.PushMessageRequest.SerializeToString,
            mom__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def PullMessage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mom.QueueService/PullMessage',
            mom__pb2.PullMessageRequest.SerializeToString,
            mom__pb2.MessageResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
